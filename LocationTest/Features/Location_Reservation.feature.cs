// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LocationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Location_ReservationFeature : object, Xunit.IClassFixture<Location_ReservationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Location_Reservation.feature"
#line hidden
        
        public Location_ReservationFeature(Location_ReservationFeature.FixtureData fixtureData, LocationTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Location_Reservation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Marque",
                        "Modèle",
                        "Plaque d\'immatriculation",
                        "Couleur",
                        "Prix",
                        "Prix au Km",
                        "Chevaux Fiscaux"});
            table2.AddRow(new string[] {
                        "Porsche",
                        "911",
                        "MM-911-BG",
                        "Blanche",
                        "200",
                        "0.9",
                        "29"});
            table2.AddRow(new string[] {
                        "Bmw",
                        "M4",
                        "BM-489-WW",
                        "Noir",
                        "200",
                        "0.5",
                        "34"});
            table2.AddRow(new string[] {
                        "Bugatti",
                        "Chiron",
                        "BB-888-CC",
                        "Bleu",
                        "200",
                        "0.9",
                        "213"});
            table2.AddRow(new string[] {
                        "Nissan",
                        "GTR",
                        "NG-999-TR",
                        "Gris",
                        "150.0",
                        "0.8",
                        "47"});
            table2.AddRow(new string[] {
                        "Peugeot",
                        "206",
                        "OP-531-PM",
                        "Gris",
                        "10",
                        "0.1",
                        "4"});
            table2.AddRow(new string[] {
                        "Ford",
                        "Mondeo",
                        "FM-455-MF",
                        "Gris",
                        "200",
                        "0.2",
                        "8"});
#line 4
    testRunner.Given("Les voitures disponibles sont", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Prénom",
                        "Nom",
                        "Mot de passe",
                        "Date de naissance",
                        "Date obtention permis",
                        "Numéro permis"});
            table3.AddRow(new string[] {
                        "Koray",
                        "AKYUREK",
                        "123456789",
                        "1999-05-05",
                        "2018-11-11",
                        "1968DC45"});
            table3.AddRow(new string[] {
                        "Nicolas",
                        "ROSSAT",
                        "987654321",
                        "1980-01-01",
                        "2017-08-25",
                        "9415AD14"});
#line 13
    testRunner.And("Les utilisateurs sont", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Prénom Utilisateur",
                        "Nom Utilisateur",
                        "Modèle Vehicule",
                        "Date de début",
                        "Date de fin",
                        "Kilomètres estimés",
                        "Kilomètres réalisés"});
            table4.AddRow(new string[] {
                        "Koray",
                        "AKYUREK",
                        "911",
                        "2022-02-12",
                        "2022-02-15",
                        "200",
                        "150"});
            table4.AddRow(new string[] {
                        "Nicolas",
                        "ROSSAT",
                        "911",
                        "2022-02-16",
                        "2022-02-17",
                        "800",
                        "900"});
            table4.AddRow(new string[] {
                        "Nicolas",
                        "ROSSAT",
                        "Mondeo",
                        "2022-02-11",
                        "2022-02-11",
                        "800",
                        "400"});
            table4.AddRow(new string[] {
                        "Koray",
                        "AKYUREK",
                        "GTR",
                        "2022-02-14",
                        "2022-02-16",
                        "200",
                        "150"});
            table4.AddRow(new string[] {
                        "Koray",
                        "AKYUREK",
                        "911",
                        "2022-02-09",
                        "2022-02-11",
                        "400",
                        "500"});
#line 17
    testRunner.And("Les réservations sont", ((string)(null)), table4, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Réservation d\'une voiture avec plus de 8 chevaux fiscaux avec un utilisateur entr" +
            "e 21 et 25 ans")]
        [Xunit.TraitAttribute("FeatureTitle", "Location_Reservation")]
        [Xunit.TraitAttribute("Description", "Réservation d\'une voiture avec plus de 8 chevaux fiscaux avec un utilisateur entr" +
            "e 21 et 25 ans")]
        public virtual void ReservationDuneVoitureAvecPlusDe8ChevauxFiscauxAvecUnUtilisateurEntre21Et25Ans()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Réservation d\'une voiture avec plus de 8 chevaux fiscaux avec un utilisateur entr" +
                    "e 21 et 25 ans", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 26
 testRunner.Given("L\'âge de l\'utilisateur est entre 21 et 25 ans", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("L\'utilisateur veut louer une voiture du \'2022-02-10\' au \'2022-02-16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.When("L\'utilisateur consulte les véhicules disponibles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Marque",
                            "Modèle",
                            "Plaque d\'immatriculation",
                            "Couleur",
                            "Prix",
                            "Prix au Km",
                            "Chevaux Fiscaux"});
                table5.AddRow(new string[] {
                            "Bugatti",
                            "Chiron",
                            "BB-888-CC",
                            "Bleu",
                            "200",
                            "0.9",
                            "213"});
                table5.AddRow(new string[] {
                            "Peugeot",
                            "206",
                            "OP-531-PM",
                            "Gris",
                            "10",
                            "0.1",
                            "4"});
                table5.AddRow(new string[] {
                            "Bmw",
                            "M4",
                            "BM-489-WW",
                            "Noir",
                            "200",
                            "0.5",
                            "34"});
#line 29
 testRunner.Then("Les voitures disponibles sont les suivantes", ((string)(null)), table5, "Then ");
#line hidden
#line 35
 testRunner.Given("L\'utilisateur a choisie la voiture \'Chiron\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.And("L\'utilisateur veut faire environ 300 kms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.When("L\'utilisateur souhaite faire une réservation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("La réservation de l\'utilisateur a été refusée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.And("Le message d\'erreur est le suivant : \'L\'utilisateur \'Valentin CROSSET\' ne peut pa" +
                        "s louer un véhicule de plus de 8 chevaux fiscaux.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Réservation d\'une voiture disponible avec un utilisateur valide")]
        [Xunit.TraitAttribute("FeatureTitle", "Location_Reservation")]
        [Xunit.TraitAttribute("Description", "Réservation d\'une voiture disponible avec un utilisateur valide")]
        public virtual void ReservationDuneVoitureDisponibleAvecUnUtilisateurValide()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Réservation d\'une voiture disponible avec un utilisateur valide", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 42
 testRunner.Given("L\'âge de l\'utilisateur est entre 21 et 25 ans", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.And("L\'utilisateur veut louer une voiture du \'2022-02-10\' au \'2022-02-16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.When("L\'utilisateur consulte les véhicules disponibles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Marque",
                            "Modèle",
                            "Plaque d\'immatriculation",
                            "Couleur",
                            "Prix",
                            "Prix au Km",
                            "Chevaux Fiscaux"});
                table6.AddRow(new string[] {
                            "Bugatti",
                            "Chiron",
                            "BB-888-CC",
                            "Bleu",
                            "200",
                            "0.9",
                            "213"});
                table6.AddRow(new string[] {
                            "Peugeot",
                            "206",
                            "OP-531-PM",
                            "Gris",
                            "10",
                            "0.1",
                            "4"});
                table6.AddRow(new string[] {
                            "Bmw",
                            "M4",
                            "BM-489-WW",
                            "Noir",
                            "200",
                            "0.5",
                            "34"});
#line 45
 testRunner.Then("Les voitures disponibles sont les suivantes", ((string)(null)), table6, "Then ");
#line hidden
#line 51
 testRunner.Given("L\'utilisateur a choisie la voiture \'206\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.And("L\'utilisateur veut faire environ 1500 kms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.When("L\'utilisateur souhaite faire une réservation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("La réservation de l\'utilisateur a été validée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.When("L\'utilisateur consulte le prix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("L\'utilisateur a payé 160 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.Given("L\'utilisateur a fait réellement 1000 kms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When("L\'utilisateur consulte le prix final", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("50 euros ont été remboursé à l\'utilisateur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Réservation : Information sur les dates de réservations")]
        [Xunit.TraitAttribute("FeatureTitle", "Location_Reservation")]
        [Xunit.TraitAttribute("Description", "Réservation : Information sur les dates de réservations")]
        public virtual void ReservationInformationSurLesDatesDeReservations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Réservation : Information sur les dates de réservations", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 62
 testRunner.Given("Connexion de l\'utilisateur valide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
 testRunner.And("L\'utilisateur veut louer une voiture du \'2022-02-10\' au \'2022-02-16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.When("L\'utilisateur consulte les réservations disponibles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Prénom Utilisateur",
                            "Nom Utilisateur",
                            "Modèle Vehicule",
                            "Date de début",
                            "Date de fin"});
                table7.AddRow(new string[] {
                            "Koray",
                            "AKYUREK",
                            "GTR",
                            "2022-02-14",
                            "2022-02-16"});
                table7.AddRow(new string[] {
                            "Koray",
                            "AKYUREK",
                            "911",
                            "2022-02-09",
                            "2022-02-11"});
                table7.AddRow(new string[] {
                            "Nicolas",
                            "ROSSAT",
                            "911",
                            "2022-02-16",
                            "2022-02-17"});
                table7.AddRow(new string[] {
                            "Nicolas",
                            "ROSSAT",
                            "Mondeo",
                            "2022-02-11",
                            "2022-02-11"});
                table7.AddRow(new string[] {
                            "Koray",
                            "AKYUREK",
                            "911",
                            "2022-02-12",
                            "2022-02-15"});
#line 65
 testRunner.Then("Les reservations entre ces dates sont les suivantes :", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Location_ReservationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Location_ReservationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
